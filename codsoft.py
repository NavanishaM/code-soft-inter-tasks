# -*- coding: utf-8 -*-
"""codsoft.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bvLXocFm1MRas-yIfbWPGgHT5yY0MhXX
"""

# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error,mean_absolute_error, r2_score


movie_data=pd.read_csv("/content/drive/MyDrive/Dataset/IMDb Movies India.csv",encoding="latin1")
movie_data

#Tasks  3
# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import classification_report, accuracy_score

# Load the Iris dataset (assuming the dataset is stored as a CSV file named "iris.csv")
iris_data = pd.read_csv("/content/drive/MyDrive/Dataset/IRIS.csv")

# Explore the dataset (optional)
print(iris_data.head())  # Display the first few rows of the dataset
print(iris_data.info())  # Display information about the dataset

# Split the dataset into features (X) and target (y)
X = iris_data.drop("species", axis=1)  # Features (sepal length, sepal width, petal length, petal width)
y = iris_data["species"]  # Target variable (species)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Choose a model (Support Vector Machine classifier)
model = SVC(kernel='linear', C=1.0, random_state=42)

# Train the model
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

# Display classification report
print("Classification Report:")
print(classification_report(y_test, y_pred))

#Tasks  4
# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression

# Load historical sales data
sales_data = pd.read_csv("/content/drive/MyDrive/Dataset/supermarket_sales - Sheet1.csv")
sales_data

#Tasks  5
# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from imblearn.over_sampling import SMOTE
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report

# Load the dataset (replace 'credit_card_transactions.csv' with your dataset)
data = pd.read_csv('/content/drive/MyDrive/Dataset/creditcard.csv')

# Preprocessing and normalization (assuming numerical features are already normalized)
X = data.drop('Class', axis=1)
y = data['Class']

# Handle class imbalance using SMOTE
oversample = SMOTE()
X, y = oversample.fit_resample(X, y)

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a classification algorithm (Logistic Regression)
model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

# Alternatively, you can use other classification algorithms like Random Forests
# model = RandomForestClassifier(n_estimators=100, random_state=42)
# model.fit(X_train, y_train)

# Evaluate the model's performance
y_pred = model.predict(X_test)
print(classification_report(y_test, y_pred))